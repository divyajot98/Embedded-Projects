
USART_Basic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000899  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000037  00000000  00000000  000008b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000b6  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000081  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000015b  00000000  00000000  00000a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000c3  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00000c87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  64:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_init>:
#define F_CPU 16000000UL
#define Baud_Rate 9600UL
#define Ubrr_value ((F_CPU/(16*Baud_Rate))-1)

void USART_init()
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	//toSET Baud Rate
	UBRRL=Ubrr_value;
  74:	89 e2       	ldi	r24, 0x29	; 41
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	27 e6       	ldi	r18, 0x67	; 103
  7a:	fc 01       	movw	r30, r24
  7c:	20 83       	st	Z, r18
	UBRRH=(Ubrr_value>>8);
  7e:	80 e4       	ldi	r24, 0x40	; 64
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	fc 01       	movw	r30, r24
  84:	10 82       	st	Z, r1
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  86:	80 e4       	ldi	r24, 0x40	; 64
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	26 e8       	ldi	r18, 0x86	; 134
  8c:	fc 01       	movw	r30, r24
  8e:	20 83       	st	Z, r18
	UCSRB=(1<<TXEN)|(1<<RXEN);
  90:	8a e2       	ldi	r24, 0x2A	; 42
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	28 e1       	ldi	r18, 0x18	; 24
  96:	fc 01       	movw	r30, r24
  98:	20 83       	st	Z, r18
}
  9a:	cf 91       	pop	r28
  9c:	df 91       	pop	r29
  9e:	08 95       	ret

000000a0 <uart_rec>:
unsigned char uart_rec()
{
  a0:	df 93       	push	r29
  a2:	cf 93       	push	r28
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSRA&(1<<RXC)));
  a8:	00 00       	nop
  aa:	8b e2       	ldi	r24, 0x2B	; 43
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	fc 01       	movw	r30, r24
  b0:	80 81       	ld	r24, Z
  b2:	88 23       	and	r24, r24
  b4:	d4 f7       	brge	.-12     	; 0xaa <uart_rec+0xa>
	return UDR;
  b6:	8c e2       	ldi	r24, 0x2C	; 44
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	fc 01       	movw	r30, r24
  bc:	80 81       	ld	r24, Z
}
  be:	cf 91       	pop	r28
  c0:	df 91       	pop	r29
  c2:	08 95       	ret

000000c4 <main>:
void main()
{
  c4:	df 93       	push	r29
  c6:	cf 93       	push	r28
  c8:	0f 92       	push	r0
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
	DDRB=0xff;		//LED
  ce:	87 e3       	ldi	r24, 0x37	; 55
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
	USART_init();
  d8:	0e 94 36 00 	call	0x6c	; 0x6c <USART_init>
	unsigned char x=0;
  dc:	19 82       	std	Y+1, r1	; 0x01
	while (1)
	{
		x=uart_rec();
  de:	0e 94 50 00 	call	0xa0	; 0xa0 <uart_rec>
  e2:	89 83       	std	Y+1, r24	; 0x01
		PORTB=x;
  e4:	88 e3       	ldi	r24, 0x38	; 56
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	29 81       	ldd	r18, Y+1	; 0x01
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
	}
  ee:	f7 cf       	rjmp	.-18     	; 0xde <main+0x1a>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
